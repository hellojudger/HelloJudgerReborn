data = {
    "core.run.compilationTimeout": "Compilation Timeout.",
    "core.run.compilationError": "{err}\nCompile finished with non-zero exit code {code}.",
    "core.run.compilationFinished": "Compiled successfully.",
    "core.run.timeLimitExceeded": "Time limit exceeded.",
    "core.run.memoryLimitExceeded": "Memory limit exceeded.",
    "core.run.programRuntimeError": "Program finished with non-zero exit code {code}.",
    "core.run.nextJudge": "Ready to proceed to the next step.",
    "core.judge.rowUnmatched": "Expected {arow} rows, but {orow} rows found.",
    "core.judge.columnUnmatched": "On row {row}, expected {acol} columns, but {ocol} columns found.",
    "core.judge.valueUnmatched": 'On row {row} column {col}, expected "{aval}", but "{oval}" found.',
    "core.judge.valueNotReal": 'On row {row} column {col}, cannot parse "{value}" as a real.',
    "core.judge.answerValueNotReal": 'On row {row} column {col} in the answer file, cannot parse "{value}" as a real.',
    "core.judge.realUnmatched": 'On row {row} column {col}, expected "{aval}", but "{oval}" found, diff is {diff}.',
    "core.judge.accepted": "OK for {row} rows.",
    "core.signals.cf": "Compilation Finished",
    "core.signals.ce": "Compilation Error",
    "core.signals.ct": "Compilation Timeout",
    "core.signals.tle": "Time Limit Exceeded",
    "core.signals.mle": "Memory Limit Exceeded",
    "core.signals.re": "Runtime Error",
    "core.signals.nj": "Run Successfully",
    "core.signals.ac": "Accepted",
    "core.signals.wa": "Wrong Answer",
    "core.signals.jf": "Judge Failed",
    "core.signals.pc": "Partially Correct",
    "core.signals.pfi": "Problem File Invalid",
    "core.signals.pfv": "Problem File Valid",
    "core.signals.sk": "Skipped",
    "core.problem_validator.interactiveNoLibrary": "The interactive problem has not been assigned an interactive library.",
    "core.problem_validator.interactiveLibraryNotFound": "The interactive library {lib} was not found.",
    "core.problem_validator.subtaskIdInvalid": "Subtask ID {sid} is invalid.",
    "core.problem_validator.subtaskIdInvalidInRequired": "One of requirment(s) of the subtask {sid} is greater than or equal to {sid}.",
    "core.problem_validator.realJudgerWithoutPrecision": "The problem using real number judging method does not specify precision.",
    "core.problem_validator.testlibJudgerWithoutPath": "The problem using Testlib Checker judging method does not specify a Checker path.",
    "core.problem_validator.testlibJudgerNotFound": "Testlib Checker {lib} was not found.",
    "core.problem_validator.statementNotFound": "A statement file {path} was not found.",
    "core.problem_validator.inNotFound": "An input file {inf} was not found.",
    "core.problem_validator.outNotFound": "An output file {ouf} was not found.",
    "core.problem_validator.pfv": "Problem file is valid.",
    "core.problem.skipped": "This testcase havn't been run but was skipped.",
    "frontend.problem_maker.title": "A Quick Tool to Make a HelloJudger Reborn Problem",
    "frontend.problem_maker.savingPath": "Saving Path",
    "frontend.problem_maker.directoryNotEmpty": "The directory of the problem is not empty. All the files and directories below it will be DELETED. Would you like to continue?",
    "frontend.problem_maker.directoryNameBlank": "Directory name cannot be blank.",
    "frontend.problem_maker.directoryNotExist": "The directory does not exist. Please create it first or select another directory.",
    "frontend.problem_maker.clearingDirectory": "Clearing directory...",
    "frontend.problem_maker.basicInformation": "Basic Information",
    "frontend.problem_maker.problemName": "Problem Name",
    "frontend.problem_maker.defaultName": "Unnamed",
    "frontend.problem_maker.testcaseSettings": "Testcase",
    "frontend.problem_maker.dataPath": "The path of the data directory",
    "frontend.problem_maker.copyingDataDirectory": "Copying data directory...",
    "frontend.problem_maker.copiedDataDirectory": "The directory has been copied successfully.",
    "frontend.problem_maker.subtaskType": "How many subtasks do you want the problem has? (s/single: just one m/multi: multiple)",
    "frontend.problem_maker.singleSubtaskInput": "The format of the input file. Please use * to infer the number of testcases. (e.g. flower*.in)",
    "frontend.problem_maker.singleSubtaskOutput": "The format of the output file. Please use * to infer the number of testcases. (e.g. flower*.out)",
    "frontend.problem_maker.matchingFind": "There are {num} file pairs matching the pattern above.",
    "frontend.problem_maker.multiSubtaskInput": "The format of the input file. Please use * to infer the number of testcases, and use $ to infer the number of the subtasks. (e.g. flower$_*.in)",
    "frontend.problem_maker.multiSubtaskOutput": "The format of the output file. Please use * to infer the number of testcases, and use $ to infer the number of the subtasks. (e.g. flower$_*.out)",
    "frontend.problem_maker.limitationsSettings": "Time & Memory Limitations",
    "frontend.problem_maker.timeLimit": "Time Limit (ms)",
    "frontend.problem_maker.illegalValue": "That's illegal. Please try again.",
    "frontend.problem_maker.memoryLimit": "Memory Limit (MiB)",
    "frontend.problem_maker.judgerSettings": "Judger",
    "frontend.problem_maker.comparatorSettings": "Comparator",
    "frontend.problem_maker.comparatorType": "The type of the comparator",
    "frontend.problem_maker.realPrecision": "Precision (the number of digits after the decimal point)",
    "frontend.problem_maker.testlibPath": "The path of the Testlib Checker",
    "frontend.problem_maker.fileNotFound": "File not found. Please try again.",
    "frontend.problem_maker.scorerSettings": "Scorer",
    "frontend.problem_maker.globalScorer": "Now we're going to set the global scorer.",
    "frontend.problem_maker.points": "Points",
    "frontend.problem_maker.globalScorerType": "The type of the global scorer",
    "frontend.problem_maker.inheritBefore": "Would you like to let all the subtasks' scorer has the samt type?",
    "frontend.problem_maker.subtaskScorerType": "The type of the subtasks' scorer",
    "frontend.problem_maker.subtaskScorer": "Now we're going to set the subtask #{num}'s scorer.",
    "frontend.problem_maker.requirments": "Requirments of the current subtask (if there isn't any, just leave it blank or type 'null')",
    "frontend.problem_maker.statementSetting": "Statement",
    "frontend.problem_maker.askToConfigureStatement": "Would you like to configure the statement?",
    "frontend.problem_maker.askToCOnfigureStatementById": "Would you like to configure the {num}th statement?",
    "frontend.problem_maker.statementName": "Statement Name",
    "frontend.problem_maker.statementType": "Statement Type",
    "frontend.problem_maker.statementPath": "The path of the statement file",
    "frontend.problem_maker.statementConfigured": "The statement has been configured successfully.",
    "frontend.problem_maker.defaultStatement": "Default Statement",
    "frontend.problem_maker.defaultStatementBody": "# {name}\n\nThis is the default statement of the problem. You can modify it as you want.",
    "frontend.problem_maker.defaultStatementConfigured": "The default statement has been configured successfully. If you want to modify it, you can find it in the directory of the problem.",
    "frontend.problem_maker.settingsConfigured": "All the settings have been configured successfully.",
    "frontend.problem_maker.problemCreated": "The problem has been created successfully.",
    "frontend.judge.compilerNotFound": "Cannot find the compiler {name}.",
    "frontend.judge.problemNotFound": "Cannot find the problem {name}.",
    "frontend.judge.sourceFileNotFound": "Cannot find the source file {name}.",
    "frontend.judge.readyToCheckProblem": "Ready to check the problem's integrity.",
    "frontend.judge.problemIntegrityChecked": "The problem's integrity has been checked successfully.",
    "frontend.judge.problemIntegrityFailed": "The problem's integrity hasbeen checked failed.",
    "frontend.judge.problemIngretiyErrSaved": "The details of the error has been saved in the file {path}.",
    "frontend.judge.readyToJudge": "Ready to judge the source file.",
    "frontend.judge.judged": "Your code has been judged.",
    "frontend.judge.scoreIs": "Score : ",
    "frontend.judge.fullScore": [
        "Bravo! Your solution is spot-on with a perfect score.",
        "Outstanding work! You've cracked this one with flying colors.",
        "Kudos to you! A perfect score means you've truly understood the challenge.",
        "Impressive! You've shown mastery over this problem. Ready for the next level?",
        "You've hit the bullseye! Your flawless execution deserves applause.",
        "Wow! You've achieved perfection. What an amazing accomplishment!",
        "Your hard work has led to a perfect result. Congratulations!",
        "Perfectly executed! You've got this down pat. On to the next challenge!",
        "A perfect score! You've clearly grasped the concepts. Well done!",
        "You've aced it! Your solution is impeccable. Keep pushing your limits!",
    ],
    "frontend.judge.partialScore": [
        "Not quite there, but you're making progress. Your solution was partially correct.",
        "You've scored some points, but there's still ground to cover. Review your logic.",
        "Good effort, but there are areas for refinement. Look for any overlooked details.",
        "You've got parts of it right. Focus on the areas where you lost points.",
        "Close, but no cigar. Analyze the feedback and adjust your strategy.",
        "You're on the right track, but there's room for improvement. Keep at it!",
        "Your solution showed promise, but didn't quite reach full marks. Try tweaking your code.",
        "You've made strides, but haven't reached the finish line. Identify the gaps in your solution.",
        "You're getting closer. Keep refining your code until it's fully optimized.",
        "You've got the basics down, but there's more to discover. Dive deeper into the problem.",
    ],
    "frontend.judge.noScore": [
        "It appears your solution didn't meet the criteria this time around.",
        "No points this round, but remember, every coder starts somewhere.",
        "Don't feel discouraged. Learning often involves making mistakes first.",
        "It's okay to not get it right away. Keep exploring different approaches.",
        "This wasn't the outcome you hoped for, but it's a chance to learn.",
        "No score this time, but don't let that deter you. Persistence pays off.",
        "Sometimes solutions take multiple tries. Don't be afraid to experiment.",
        "It's all part of the learning journey. Use this as motivation to improve.",
        "Don't lose heart. Every failed attempt is a step towards success.",
        "Every coder faces challenges. The key is to keep going and never stop learning.",
    ],
    "frontend.judge.askToExportHtml": "Would you like to export the result to a HTML file?",
    "frontend.judge.HtmlExported": "The result has been exported to the file {path}.",
    "frontend.judge.askToOpenHtml": "Would you like to open the HTML file by your default navigator?",
    "main.error": "Error occurred : ",
    "main.cleaning": "Cleaning...",
    "main.cleaned": "Cleaned.",
    "main.downloadingTestlib": "Downloading Testlib from Github...",
    "main.illegalResourceName": "That's an illegal resource name. Please try again.",
    "main.availableLanguages": "Available languages:",
}
